ciecia@alpha:~/Desktop/wsb/iac-labs-infra$ cd terraform/zad1/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1$ ls
1-import  2-zmienne  3-moduly
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1$ cd 1-import/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ ls
main.tf
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching "5.30.0"...
- Installing hashicorp/aws v5.30.0...
- Installed hashicorp/aws v5.30.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ cd ../2-zmienne/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/2-zmienne$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching "5.30.0"...
- Installing hashicorp/aws v5.30.0...
- Installed hashicorp/aws v5.30.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/2-zmienne$ cd ../3-moduly/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ terraform init

Initializing the backend...
Initializing modules...
- aws_vpc in modules/vpc
- aws_vpc_east in modules/vpc
- webserver in modules/ec2
- webserver2 in modules/ec2

Initializing provider plugins...
- Finding hashicorp/aws versions matching "5.30.0"...
- Installing hashicorp/aws v5.30.0...
- Installed hashicorp/aws v5.30.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

╷
│ Warning: Reference to undefined provider
│ 
│   on main.tf line 11, in module "aws_vpc_east":
│   11:     aws = aws.east
│ 
│ There is no explicit declaration for local provider name "aws" in module.aws_vpc_east, so Terraform is assuming you mean to pass a configuration for
│ "hashicorp/aws".
│ 
│ If you also control the child module, add a required_providers entry named "aws" with the source address "hashicorp/aws".
│ 
│ (and one more similar warning elsewhere)
╵

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ cd ../1-import/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-0669b163befffbdfc"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ terrafrom apply
bash: terrafrom: command not found
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-0669b163befffbdfc"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.web: Creating...
aws_instance.web: Still creating... [10s elapsed]
aws_instance.web: Still creating... [20s elapsed]
aws_instance.web: Still creating... [30s elapsed]
aws_instance.web: Creation complete after 33s [id=i-05292e2e8043f7476]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ terraform apply
aws_instance.web: Refreshing state... [id=i-05292e2e8043f7476]

No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.

Apply complete! Resources: 0 added, 0 changed, 0 destroyed.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ terraform state list
aws_instance.web
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ terraform state show aws_instance.web
# aws_instance.web:
resource "aws_instance" "web" {
    ami                                  = "ami-0669b163befffbdfc"
    arn                                  = "arn:aws:ec2:eu-central-1:326017164522:instance/i-05292e2e8043f7476"
    associate_public_ip_address          = true
    availability_zone                    = "eu-central-1a"
    cpu_core_count                       = 1
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-05292e2e8043f7476"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "running"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    monitoring                           = false
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-03d03509f68a73bf0"
    private_dns                          = "ip-172-31-22-11.eu-central-1.compute.internal"
    private_ip                           = "172.31.22.11"
    public_dns                           = "ec2-18-185-43-113.eu-central-1.compute.amazonaws.com"
    public_ip                            = "18.185.43.113"
    secondary_private_ips                = []
    security_groups                      = [
        "default",
    ]
    source_dest_check                    = true
    subnet_id                            = "subnet-1000517a"
    tags                                 = {}
    tags_all                             = {}
    tenancy                              = "default"
    user_data_replace_on_change          = false
    vpc_security_group_ids               = [
        "sg-f4d9c583",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        core_count       = 1
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = "disabled"
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = false
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/xvda"
        encrypted             = false
        iops                  = 3000
        tags                  = {}
        throughput            = 125
        volume_id             = "vol-0f317a548d2d51e13"
        volume_size           = 8
        volume_type           = "gp3"
    }
}
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ terraform destroy
aws_instance.web: Refreshing state... [id=i-05292e2e8043f7476]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.web will be destroyed
  - resource "aws_instance" "web" {
      - ami                                  = "ami-0669b163befffbdfc" -> null
      - arn                                  = "arn:aws:ec2:eu-central-1:326017164522:instance/i-05292e2e8043f7476" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "eu-central-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-05292e2e8043f7476" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-03d03509f68a73bf0" -> null
      - private_dns                          = "ip-172-31-22-11.eu-central-1.compute.internal" -> null
      - private_ip                           = "172.31.22.11" -> null
      - public_dns                           = "ec2-18-185-43-113.eu-central-1.compute.amazonaws.com" -> null
      - public_ip                            = "18.185.43.113" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "default",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-1000517a" -> null
      - tags                                 = {} -> null
      - tags_all                             = {} -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-f4d9c583",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 2 -> null
          - http_tokens                 = "required" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 3000 -> null
          - tags                  = {} -> null
          - throughput            = 125 -> null
          - volume_id             = "vol-0f317a548d2d51e13" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp3" -> null
        }
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_instance.web: Destroying... [id=i-05292e2e8043f7476]
aws_instance.web: Still destroying... [id=i-05292e2e8043f7476, 10s elapsed]
aws_instance.web: Still destroying... [id=i-05292e2e8043f7476, 20s elapsed]
aws_instance.web: Still destroying... [id=i-05292e2e8043f7476, 30s elapsed]
aws_instance.web: Still destroying... [id=i-05292e2e8043f7476, 40s elapsed]
aws_instance.web: Destruction complete after 40s

Destroy complete! Resources: 1 destroyed.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/1-import$ 

ciecia@alpha:~/Desktop/wsb/iac-labs-infra$ cd 
.git/      iac-labs/  pulumi/    terraform/ 
ciecia@alpha:~/Desktop/wsb/iac-labs-infra$ cd terraform/zad
zad1/ zad2/ zad3/ 
ciecia@alpha:~/Desktop/wsb/iac-labs-infra$ cd terraform/zad2/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ cd ../zad1/2-zmienne/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/2-zmienne$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-0669b163befffbdfc"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "foobar"
        }
      + tags_all                             = {
          + "Name" = "foobar"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_subnet.main will be created
  + resource "aws_subnet" "main" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.5.0.0/25"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "tuts-subnet"
        }
      + tags_all                                       = {
          + "Name" = "tuts-subnet"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.5.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "some-vpc"
          + "baz"  = "123"
          + "foo"  = "bar"
        }
      + tags_all                             = {
          + "Name" = "some-vpc"
          + "baz"  = "123"
          + "foo"  = "bar"
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/2-zmienne$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-0669b163befffbdfc"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "foobar"
        }
      + tags_all                             = {
          + "Name" = "foobar"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_subnet.main will be created
  + resource "aws_subnet" "main" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.5.0.0/25"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "tuts-subnet"
        }
      + tags_all                                       = {
          + "Name" = "tuts-subnet"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.5.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "some-vpc"
          + "baz"  = "123"
          + "foo"  = "bar"
        }
      + tags_all                             = {
          + "Name" = "some-vpc"
          + "baz"  = "123"
          + "foo"  = "bar"
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_vpc.main: Creating...
aws_vpc.main: Creation complete after 1s [id=vpc-0e916de78d4eca3b6]
aws_subnet.main: Creating...
aws_subnet.main: Creation complete after 1s [id=subnet-0c4c7cfc0cb93e1fd]
aws_instance.web: Creating...
aws_instance.web: Still creating... [10s elapsed]
aws_instance.web: Still creating... [20s elapsed]
aws_instance.web: Still creating... [30s elapsed]
aws_instance.web: Creation complete after 32s [id=i-0e87b6616ffcca0e1]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/2-zmienne$ terraform apply
aws_vpc.main: Refreshing state... [id=vpc-0e916de78d4eca3b6]
aws_subnet.main: Refreshing state... [id=subnet-0c4c7cfc0cb93e1fd]
aws_instance.web: Refreshing state... [id=i-0e87b6616ffcca0e1]

No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.

Apply complete! Resources: 0 added, 0 changed, 0 destroyed.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/2-zmienne$ terraform state list
aws_instance.web
aws_subnet.main
aws_vpc.main
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/2-zmienne$ terraform state show aws_vpc.main
# aws_vpc.main:
resource "aws_vpc" "main" {
    arn                                  = "arn:aws:ec2:eu-central-1:326017164522:vpc/vpc-0e916de78d4eca3b6"
    assign_generated_ipv6_cidr_block     = false
    cidr_block                           = "10.5.0.0/16"
    default_network_acl_id               = "acl-007205dbb4f9c9082"
    default_route_table_id               = "rtb-0a90f5d34eac233af"
    default_security_group_id            = "sg-0ca69c6bb9fe80c3c"
    dhcp_options_id                      = "dopt-1ab2dc70"
    enable_dns_hostnames                 = false
    enable_dns_support                   = true
    enable_network_address_usage_metrics = false
    id                                   = "vpc-0e916de78d4eca3b6"
    instance_tenancy                     = "default"
    ipv6_netmask_length                  = 0
    main_route_table_id                  = "rtb-0a90f5d34eac233af"
    owner_id                             = "326017164522"
    tags                                 = {
        "Name" = "some-vpc"
        "baz"  = "123"
        "foo"  = "bar"
    }
    tags_all                             = {
        "Name" = "some-vpc"
        "baz"  = "123"
        "foo"  = "bar"
    }
}
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/2-zmienne$ terraform destroy 
aws_vpc.main: Refreshing state... [id=vpc-0e916de78d4eca3b6]
aws_subnet.main: Refreshing state... [id=subnet-0c4c7cfc0cb93e1fd]
aws_instance.web: Refreshing state... [id=i-0e87b6616ffcca0e1]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.web will be destroyed
  - resource "aws_instance" "web" {
      - ami                                  = "ami-0669b163befffbdfc" -> null
      - arn                                  = "arn:aws:ec2:eu-central-1:326017164522:instance/i-0e87b6616ffcca0e1" -> null
      - associate_public_ip_address          = false -> null
      - availability_zone                    = "eu-central-1c" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0e87b6616ffcca0e1" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0ada5d0be493d3940" -> null
      - private_dns                          = "ip-10-5-0-72.eu-central-1.compute.internal" -> null
      - private_ip                           = "10.5.0.72" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0c4c7cfc0cb93e1fd" -> null
      - tags                                 = {
          - "Name" = "foobar"
        } -> null
      - tags_all                             = {
          - "Name" = "foobar"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-0ca69c6bb9fe80c3c",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 2 -> null
          - http_tokens                 = "required" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 3000 -> null
          - tags                  = {} -> null
          - throughput            = 125 -> null
          - volume_id             = "vol-02da6413149fb3faa" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp3" -> null
        }
    }

  # aws_subnet.main will be destroyed
  - resource "aws_subnet" "main" {
      - arn                                            = "arn:aws:ec2:eu-central-1:326017164522:subnet/subnet-0c4c7cfc0cb93e1fd" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "eu-central-1c" -> null
      - availability_zone_id                           = "euc1-az1" -> null
      - cidr_block                                     = "10.5.0.0/25" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0c4c7cfc0cb93e1fd" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "326017164522" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Name" = "tuts-subnet"
        } -> null
      - tags_all                                       = {
          - "Name" = "tuts-subnet"
        } -> null
      - vpc_id                                         = "vpc-0e916de78d4eca3b6" -> null
    }

  # aws_vpc.main will be destroyed
  - resource "aws_vpc" "main" {
      - arn                                  = "arn:aws:ec2:eu-central-1:326017164522:vpc/vpc-0e916de78d4eca3b6" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.5.0.0/16" -> null
      - default_network_acl_id               = "acl-007205dbb4f9c9082" -> null
      - default_route_table_id               = "rtb-0a90f5d34eac233af" -> null
      - default_security_group_id            = "sg-0ca69c6bb9fe80c3c" -> null
      - dhcp_options_id                      = "dopt-1ab2dc70" -> null
      - enable_dns_hostnames                 = false -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-0e916de78d4eca3b6" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-0a90f5d34eac233af" -> null
      - owner_id                             = "326017164522" -> null
      - tags                                 = {
          - "Name" = "some-vpc"
          - "baz"  = "123"
          - "foo"  = "bar"
        } -> null
      - tags_all                             = {
          - "Name" = "some-vpc"
          - "baz"  = "123"
          - "foo"  = "bar"
        } -> null
    }

Plan: 0 to add, 0 to change, 3 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_instance.web: Destroying... [id=i-0e87b6616ffcca0e1]
aws_instance.web: Still destroying... [id=i-0e87b6616ffcca0e1, 10s elapsed]
aws_instance.web: Still destroying... [id=i-0e87b6616ffcca0e1, 20s elapsed]
aws_instance.web: Still destroying... [id=i-0e87b6616ffcca0e1, 30s elapsed]
aws_instance.web: Destruction complete after 31s
aws_subnet.main: Destroying... [id=subnet-0c4c7cfc0cb93e1fd]
aws_subnet.main: Destruction complete after 0s
aws_vpc.main: Destroying... [id=vpc-0e916de78d4eca3b6]
aws_vpc.main: Destruction complete after 1s

Destroy complete! Resources: 3 destroyed.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/2-zmienne$ 

ciecia@alpha:~/Desktop/wsb/iac-labs-infra$ cd terraform/zad3/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad3$ ls
images.tf  main.tf  outputs.tf  providers.tf
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad3$ cd ../zad1/3-moduly/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.aws_vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags_all                             = (known after apply)
    }

  # module.aws_vpc_east.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags_all                             = (known after apply)
    }

  # module.webserver.aws_instance.webserver will be created
  + resource "aws_instance" "webserver" {
      + ami                                  = "ami-0669b163befffbdfc"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "web1"
        }
      + tags_all                             = {
          + "Name" = "web1"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # module.webserver.aws_subnet.webserver will be created
  + resource "aws_subnet" "webserver" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.16.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.webserver2.aws_instance.webserver will be created
  + resource "aws_instance" "webserver" {
      + ami                                  = "ami-0230bd60aa48260c6"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "web2"
        }
      + tags_all                             = {
          + "Name" = "web2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # module.webserver2.aws_subnet.webserver will be created
  + resource "aws_subnet" "webserver" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.32.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

Plan: 6 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + webserver  = (known after apply)
  + webserver2 = (known after apply)
╷
│ Warning: Reference to undefined provider
│ 
│   on main.tf line 11, in module "aws_vpc_east":
│   11:     aws = aws.east
│ 
│ There is no explicit declaration for local provider name "aws" in module.aws_vpc_east, so Terraform is assuming you mean to pass a configuration for
│ "hashicorp/aws".
│ 
│ If you also control the child module, add a required_providers entry named "aws" with the source address "hashicorp/aws".
╵

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.aws_vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags_all                             = (known after apply)
    }

  # module.aws_vpc_east.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags_all                             = (known after apply)
    }

  # module.webserver.aws_instance.webserver will be created
  + resource "aws_instance" "webserver" {
      + ami                                  = "ami-0669b163befffbdfc"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "web1"
        }
      + tags_all                             = {
          + "Name" = "web1"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # module.webserver.aws_subnet.webserver will be created
  + resource "aws_subnet" "webserver" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.16.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.webserver2.aws_instance.webserver will be created
  + resource "aws_instance" "webserver" {
      + ami                                  = "ami-0230bd60aa48260c6"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "web2"
        }
      + tags_all                             = {
          + "Name" = "web2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # module.webserver2.aws_subnet.webserver will be created
  + resource "aws_subnet" "webserver" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.32.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

Plan: 6 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + webserver  = (known after apply)
  + webserver2 = (known after apply)
╷
│ Warning: Reference to undefined provider
│ 
│   on main.tf line 11, in module "aws_vpc_east":
│   11:     aws = aws.east
│ 
│ There is no explicit declaration for local provider name "aws" in module.aws_vpc_east, so Terraform is assuming you mean to pass a configuration for
│ "hashicorp/aws".
│ 
│ If you also control the child module, add a required_providers entry named "aws" with the source address "hashicorp/aws".
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.aws_vpc.aws_vpc.main: Creating...
module.aws_vpc_east.aws_vpc.main: Creating...
module.aws_vpc.aws_vpc.main: Creation complete after 1s [id=vpc-09449a1af684dec18]
module.webserver.aws_subnet.webserver: Creating...
module.webserver.aws_subnet.webserver: Creation complete after 0s [id=subnet-062e464824a4e0894]
module.webserver.aws_instance.webserver: Creating...
module.aws_vpc_east.aws_vpc.main: Creation complete after 3s [id=vpc-0e6187b28dc635586]
module.webserver2.aws_subnet.webserver: Creating...
module.webserver2.aws_subnet.webserver: Creation complete after 2s [id=subnet-0eefe9ec81c51c5b2]
module.webserver2.aws_instance.webserver: Creating...
module.webserver.aws_instance.webserver: Still creating... [10s elapsed]
module.webserver2.aws_instance.webserver: Still creating... [10s elapsed]
module.webserver.aws_instance.webserver: Still creating... [20s elapsed]
module.webserver2.aws_instance.webserver: Still creating... [20s elapsed]
module.webserver.aws_instance.webserver: Still creating... [30s elapsed]
module.webserver.aws_instance.webserver: Creation complete after 33s [id=i-01c83fb3edf37be48]
module.webserver2.aws_instance.webserver: Still creating... [30s elapsed]
module.webserver2.aws_instance.webserver: Creation complete after 34s [id=i-04fa96accdb719f56]

Apply complete! Resources: 6 added, 0 changed, 0 destroyed.

Outputs:

webserver = "3.77.33.215"
webserver2 = "107.20.58.187"
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ terraform apply
module.aws_vpc.aws_vpc.main: Refreshing state... [id=vpc-09449a1af684dec18]
module.aws_vpc_east.aws_vpc.main: Refreshing state... [id=vpc-0e6187b28dc635586]
module.webserver.aws_subnet.webserver: Refreshing state... [id=subnet-062e464824a4e0894]
module.webserver.aws_instance.webserver: Refreshing state... [id=i-01c83fb3edf37be48]
module.webserver2.aws_subnet.webserver: Refreshing state... [id=subnet-0eefe9ec81c51c5b2]
module.webserver2.aws_instance.webserver: Refreshing state... [id=i-04fa96accdb719f56]

No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.
╷
│ Warning: Reference to undefined provider
│ 
│   on main.tf line 11, in module "aws_vpc_east":
│   11:     aws = aws.east
│ 
│ There is no explicit declaration for local provider name "aws" in module.aws_vpc_east, so Terraform is assuming you mean to pass a configuration for
│ "hashicorp/aws".
│ 
│ If you also control the child module, add a required_providers entry named "aws" with the source address "hashicorp/aws".
╵

Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

webserver = "3.77.33.215"
webserver2 = "107.20.58.187"
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ terraform state list
module.aws_vpc.aws_vpc.main
module.aws_vpc_east.aws_vpc.main
module.webserver.aws_instance.webserver
module.webserver.aws_subnet.webserver
module.webserver2.aws_instance.webserver
module.webserver2.aws_subnet.webserver
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ terraform state show module.webserver2.aws_subnet.webserver
# module.webserver2.aws_subnet.webserver:
resource "aws_subnet" "webserver" {
    arn                                            = "arn:aws:ec2:us-east-1:326017164522:subnet/subnet-0eefe9ec81c51c5b2"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az4"
    cidr_block                                     = "10.0.32.0/20"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0eefe9ec81c51c5b2"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    owner_id                                       = "326017164522"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {}
    tags_all                                       = {}
    vpc_id                                         = "vpc-0e6187b28dc635586"
}
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ terraform taint module.webserver2.aws_instance.webserver
Resource instance module.webserver2.aws_instance.webserver has been marked as tainted.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ terraform apply
module.aws_vpc.aws_vpc.main: Refreshing state... [id=vpc-018657882b213f760]
module.aws_vpc_east.aws_vpc.main: Refreshing state... [id=vpc-09801a65ceaf5f750]
module.webserver.aws_subnet.webserver: Refreshing state... [id=subnet-01081e1863a3e9fe5]
module.webserver.aws_instance.webserver: Refreshing state... [id=i-082050832c169d41d]
module.webserver2.aws_subnet.webserver: Refreshing state... [id=subnet-030f5e90fcbf741ad]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.webserver2.aws_instance.webserver will be created
  + resource "aws_instance" "webserver" {
      + ami                                  = "ami-02aead0a55359d6ec"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = "subnet-030f5e90fcbf741ad"
      + tags                                 = {
          + "Name" = "web2"
        }
      + tags_all                             = {
          + "Name" = "web2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  ~ webserver2 = "44.201.66.129" -> (known after apply)
╷
│ Warning: Reference to undefined provider
│ 
│   on main.tf line 11, in module "aws_vpc_east":
│   11:     aws = aws.east
│ 
│ There is no explicit declaration for local provider name "aws" in module.aws_vpc_east, so Terraform is assuming you mean to pass a configuration for
│ "hashicorp/aws".
│ 
│ If you also control the child module, add a required_providers entry named "aws" with the source address "hashicorp/aws".
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.webserver2.aws_instance.webserver: Creating...
module.webserver2.aws_instance.webserver: Still creating... [10s elapsed]
module.webserver2.aws_instance.webserver: Still creating... [20s elapsed]
module.webserver2.aws_instance.webserver: Still creating... [30s elapsed]
module.webserver2.aws_instance.webserver: Still creating... [40s elapsed]
module.webserver2.aws_instance.webserver: Creation complete after 44s [id=i-016e15a7d0e180e22]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

webserver = "35.158.221.37"
webserver2 = "3.222.117.48"
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ 
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ terraform destroy 
module.aws_vpc.aws_vpc.main: Refreshing state... [id=vpc-09449a1af684dec18]
module.aws_vpc_east.aws_vpc.main: Refreshing state... [id=vpc-0e6187b28dc635586]
module.webserver.aws_subnet.webserver: Refreshing state... [id=subnet-062e464824a4e0894]
module.webserver.aws_instance.webserver: Refreshing state... [id=i-01c83fb3edf37be48]
module.webserver2.aws_subnet.webserver: Refreshing state... [id=subnet-0eefe9ec81c51c5b2]
module.webserver2.aws_instance.webserver: Refreshing state... [id=i-04fa96accdb719f56]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # module.aws_vpc.aws_vpc.main will be destroyed
  - resource "aws_vpc" "main" {
      - arn                                  = "arn:aws:ec2:eu-central-1:326017164522:vpc/vpc-09449a1af684dec18" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.0.0.0/16" -> null
      - default_network_acl_id               = "acl-055f766475a8305c3" -> null
      - default_route_table_id               = "rtb-0e799f4a9facf1ad2" -> null
      - default_security_group_id            = "sg-07af2653638caa7be" -> null
      - dhcp_options_id                      = "dopt-1ab2dc70" -> null
      - enable_dns_hostnames                 = false -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-09449a1af684dec18" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-0e799f4a9facf1ad2" -> null
      - owner_id                             = "326017164522" -> null
      - tags                                 = {} -> null
      - tags_all                             = {} -> null
    }

  # module.aws_vpc_east.aws_vpc.main will be destroyed
  - resource "aws_vpc" "main" {
      - arn                                  = "arn:aws:ec2:us-east-1:326017164522:vpc/vpc-0e6187b28dc635586" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.0.0.0/16" -> null
      - default_network_acl_id               = "acl-0031791966485991a" -> null
      - default_route_table_id               = "rtb-0444583370a659fe7" -> null
      - default_security_group_id            = "sg-071bf3ac189178ccf" -> null
      - dhcp_options_id                      = "dopt-05187cada3e7e3e5c" -> null
      - enable_dns_hostnames                 = false -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-0e6187b28dc635586" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-0444583370a659fe7" -> null
      - owner_id                             = "326017164522" -> null
      - tags                                 = {} -> null
      - tags_all                             = {} -> null
    }

  # module.webserver.aws_instance.webserver will be destroyed
  - resource "aws_instance" "webserver" {
      - ami                                  = "ami-0669b163befffbdfc" -> null
      - arn                                  = "arn:aws:ec2:eu-central-1:326017164522:instance/i-01c83fb3edf37be48" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "eu-central-1c" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-01c83fb3edf37be48" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0580fc76d7061ce3a" -> null
      - private_dns                          = "ip-10-0-24-32.eu-central-1.compute.internal" -> null
      - private_ip                           = "10.0.24.32" -> null
      - public_ip                            = "3.77.33.215" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-062e464824a4e0894" -> null
      - tags                                 = {
          - "Name" = "web1"
        } -> null
      - tags_all                             = {
          - "Name" = "web1"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-07af2653638caa7be",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 2 -> null
          - http_tokens                 = "required" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 3000 -> null
          - tags                  = {} -> null
          - throughput            = 125 -> null
          - volume_id             = "vol-058004ea6fb7be41e" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp3" -> null
        }
    }

  # module.webserver.aws_subnet.webserver will be destroyed
  - resource "aws_subnet" "webserver" {
      - arn                                            = "arn:aws:ec2:eu-central-1:326017164522:subnet/subnet-062e464824a4e0894" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "eu-central-1c" -> null
      - availability_zone_id                           = "euc1-az1" -> null
      - cidr_block                                     = "10.0.16.0/20" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-062e464824a4e0894" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "326017164522" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {} -> null
      - tags_all                                       = {} -> null
      - vpc_id                                         = "vpc-09449a1af684dec18" -> null
    }

  # module.webserver2.aws_instance.webserver will be destroyed
  - resource "aws_instance" "webserver" {
      - ami                                  = "ami-02aead0a55359d6ec" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:326017164522:instance/i-04fa96accdb719f56" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1b" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-04fa96accdb719f56" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0422690a3bd4a889a" -> null
      - private_dns                          = "ip-10-0-41-150.ec2.internal" -> null
      - private_ip                           = "10.0.41.150" -> null
      - public_ip                            = "107.20.58.187" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0eefe9ec81c51c5b2" -> null
      - tags                                 = {
          - "Name" = "web2"
        } -> null
      - tags_all                             = {
          - "Name" = "web2"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-071bf3ac189178ccf",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 2 -> null
          - http_tokens                 = "required" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 3000 -> null
          - tags                  = {} -> null
          - throughput            = 125 -> null
          - volume_id             = "vol-02f4dcf6ba5b82ef7" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp3" -> null
        }
    }

  # module.webserver2.aws_subnet.webserver will be destroyed
  - resource "aws_subnet" "webserver" {
      - arn                                            = "arn:aws:ec2:us-east-1:326017164522:subnet/subnet-0eefe9ec81c51c5b2" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1b" -> null
      - availability_zone_id                           = "use1-az4" -> null
      - cidr_block                                     = "10.0.32.0/20" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0eefe9ec81c51c5b2" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "326017164522" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {} -> null
      - tags_all                                       = {} -> null
      - vpc_id                                         = "vpc-0e6187b28dc635586" -> null
    }

Plan: 0 to add, 0 to change, 6 to destroy.

Changes to Outputs:
  - webserver  = "3.77.33.215" -> null
  - webserver2 = "107.20.58.187" -> null
╷
│ Warning: Reference to undefined provider
│ 
│   on main.tf line 11, in module "aws_vpc_east":
│   11:     aws = aws.east
│ 
│ There is no explicit declaration for local provider name "aws" in module.aws_vpc_east, so Terraform is assuming you mean to pass a configuration for
│ "hashicorp/aws".
│ 
│ If you also control the child module, add a required_providers entry named "aws" with the source address "hashicorp/aws".
╵

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

module.webserver.aws_instance.webserver: Destroying... [id=i-01c83fb3edf37be48]
module.webserver2.aws_instance.webserver: Destroying... [id=i-04fa96accdb719f56]
module.webserver.aws_instance.webserver: Still destroying... [id=i-01c83fb3edf37be48, 10s elapsed]
module.webserver2.aws_instance.webserver: Still destroying... [id=i-04fa96accdb719f56, 10s elapsed]
module.webserver.aws_instance.webserver: Still destroying... [id=i-01c83fb3edf37be48, 20s elapsed]
module.webserver2.aws_instance.webserver: Still destroying... [id=i-04fa96accdb719f56, 20s elapsed]
module.webserver.aws_instance.webserver: Still destroying... [id=i-01c83fb3edf37be48, 30s elapsed]
module.webserver.aws_instance.webserver: Destruction complete after 30s
module.webserver.aws_subnet.webserver: Destroying... [id=subnet-062e464824a4e0894]
module.webserver2.aws_instance.webserver: Still destroying... [id=i-04fa96accdb719f56, 30s elapsed]
module.webserver.aws_subnet.webserver: Destruction complete after 0s
module.aws_vpc.aws_vpc.main: Destroying... [id=vpc-09449a1af684dec18]
module.aws_vpc.aws_vpc.main: Destruction complete after 1s
module.webserver2.aws_instance.webserver: Destruction complete after 31s
module.webserver2.aws_subnet.webserver: Destroying... [id=subnet-0eefe9ec81c51c5b2]
module.webserver2.aws_subnet.webserver: Destruction complete after 1s
module.aws_vpc_east.aws_vpc.main: Destroying... [id=vpc-0e6187b28dc635586]
module.aws_vpc_east.aws_vpc.main: Destruction complete after 1s

Destroy complete! Resources: 6 destroyed.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad1/3-moduly$ 