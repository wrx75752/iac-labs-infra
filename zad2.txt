ciecia@alpha:~/Desktop/wsb/iac-labs-infra$ cd 
.git/      iac-labs/  pulumi/    terraform/ 
ciecia@alpha:~/Desktop/wsb/iac-labs-infra$ cd terraform/zad2/
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ ls
main.tf
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding kreuzwerker/docker versions matching "2.24.0"...
- Installing kreuzwerker/docker v2.24.0...
- Installed kreuzwerker/docker v2.24.0 (self-signed, key ID BD080C4571C6104C)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx will be created
  + resource "docker_container" "nginx" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + gateway                                     = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ip_address                                  = (known after apply)
      + ip_prefix_length                            = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "tutorial"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 8080
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = false
      + latest       = (known after apply)
      + name         = "nginx:latest"
      + output       = (known after apply)
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + address = "http://localhost:8080"
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx will be created
  + resource "docker_container" "nginx" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + gateway                                     = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ip_address                                  = (known after apply)
      + ip_prefix_length                            = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "tutorial"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 8080
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = false
      + latest       = (known after apply)
      + name         = "nginx:latest"
      + output       = (known after apply)
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + address = "http://localhost:8080"
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.nginx: Creating...
docker_image.nginx: Still creating... [10s elapsed]
docker_image.nginx: Creation complete after 15s [id=sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest]
docker_container.nginx: Creating...
docker_container.nginx: Creation complete after 1s [id=028d164a58a4d922f957404be3bc21a2f839507bab536d746d401e74771e8545]
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

address = "http://localhost:8080"
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform plan
docker_image.nginx: Refreshing state... [id=sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest]
docker_container.nginx: Refreshing state... [id=028d164a58a4d922f957404be3bc21a2f839507bab536d746d401e74771e8545]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.tag_nginx1 will be created
  + resource "docker_tag" "tag_nginx1" {
      + id              = (known after apply)
      + source_image    = "nginx:latest"
      + source_image_id = (known after apply)
      + target_image    = "nginx1"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 25, in resource "docker_container" "nginx":
│   25:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform plan
╷
│ Error: Unsupported attribute
│ 
│   on main.tf line 25, in resource "docker_container" "nginx":
│   25:   image = docker_image.nginx.nginx1
│ 
│ This object has no argument, nested block, or exported attribute named "nginx1".
╵
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform plan
docker_image.nginx: Refreshing state... [id=sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest]
docker_container.nginx: Refreshing state... [id=028d164a58a4d922f957404be3bc21a2f839507bab536d746d401e74771e8545]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform planned the following actions, but then encountered a problem:

  # docker_tag.tag_nginx will be created
  + resource "docker_tag" "tag_nginx" {
      + id              = (known after apply)
      + source_image    = "nginx:latest"
      + source_image_id = (known after apply)
      + target_image    = "nginx1"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Error: Incorrect attribute value type
│ 
│   on main.tf line 25, in resource "docker_container" "nginx":
│   25:   image = docker_tag.tag_nginx
│     ├────────────────
│     │ docker_tag.tag_nginx is object with 4 attributes
│ 
│ Inappropriate value for attribute "image": string required.
╵
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform plan
docker_image.nginx: Refreshing state... [id=sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest]
docker_container.nginx: Refreshing state... [id=028d164a58a4d922f957404be3bc21a2f839507bab536d746d401e74771e8545]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # docker_container.nginx must be replaced
-/+ resource "docker_container" "nginx" {
      + bridge                                      = (known after apply)
      ~ command                                     = [
          - "nginx",
          - "-g",
          - "daemon off;",
        ] -> (known after apply)
      + container_logs                              = (known after apply)
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      ~ entrypoint                                  = [
          - "/docker-entrypoint.sh",
        ] -> (known after apply)
      ~ env                                         = [] -> (known after apply)
      + exit_code                                   = (known after apply)
      ~ gateway                                     = "172.17.0.1" -> (known after apply)
      - group_add                                   = [] -> null
      ~ hostname                                    = "028d164a58a4" -> (known after apply)
      ~ id                                          = "028d164a58a4d922f957404be3bc21a2f839507bab536d746d401e74771e8545" -> (known after apply)
      ~ image                                       = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9" -> "nginx1" # forces replacement
      ~ init                                        = false -> (known after apply)
      ~ ip_address                                  = "172.17.0.2" -> (known after apply)
      ~ ip_prefix_length                            = 16 -> (known after apply)
      ~ ipc_mode                                    = "private" -> (known after apply)
      - links                                       = [] -> null
      ~ log_driver                                  = "json-file" -> (known after apply)
      - log_opts                                    = {} -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
        name                                        = "tutorial"
      ~ network_data                                = [
          - {
              - gateway                   = "172.17.0.1"
              - global_ipv6_address       = ""
              - global_ipv6_prefix_length = 0
              - ip_address                = "172.17.0.2"
              - ip_prefix_length          = 16
              - ipv6_gateway              = ""
              - network_name              = "bridge"
            },
        ] -> (known after apply)
      - network_mode                                = "default" -> null
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      ~ runtime                                     = "runc" -> (known after apply)
      ~ security_opts                               = [] -> (known after apply)
      ~ shm_size                                    = 64 -> (known after apply)
      ~ stop_signal                                 = "SIGQUIT" -> (known after apply)
      ~ stop_timeout                                = 0 -> (known after apply)
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
        # (13 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

  # docker_tag.tag_nginx will be created
  + resource "docker_tag" "tag_nginx" {
      + id              = (known after apply)
      + source_image    = "nginx:latest"
      + source_image_id = (known after apply)
      + target_image    = "nginx1"
    }

Plan: 2 to add, 0 to change, 1 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform state list
docker_container.nginx
docker_image.nginx
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform show
# docker_container.nginx:
resource "docker_container" "nginx" {
    attach                                      = false
    command                                     = [
        "nginx",
        "-g",
        "daemon off;",
    ]
    container_read_refresh_timeout_milliseconds = 15000
    cpu_shares                                  = 0
    entrypoint                                  = [
        "/docker-entrypoint.sh",
    ]
    env                                         = []
    gateway                                     = "172.17.0.1"
    hostname                                    = "028d164a58a4"
    id                                          = "028d164a58a4d922f957404be3bc21a2f839507bab536d746d401e74771e8545"
    image                                       = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9"
    init                                        = false
    ip_address                                  = "172.17.0.2"
    ip_prefix_length                            = 16
    ipc_mode                                    = "private"
    log_driver                                  = "json-file"
    logs                                        = false
    max_retry_count                             = 0
    memory                                      = 0
    memory_swap                                 = 0
    must_run                                    = true
    name                                        = "tutorial"
    network_data                                = [
        {
            gateway                   = "172.17.0.1"
            global_ipv6_address       = ""
            global_ipv6_prefix_length = 0
            ip_address                = "172.17.0.2"
            ip_prefix_length          = 16
            ipv6_gateway              = ""
            network_name              = "bridge"
        },
    ]
    network_mode                                = "default"
    privileged                                  = false
    publish_all_ports                           = false
    read_only                                   = false
    remove_volumes                              = true
    restart                                     = "no"
    rm                                          = false
    runtime                                     = "runc"
    security_opts                               = []
    shm_size                                    = 64
    start                                       = true
    stdin_open                                  = false
    stop_signal                                 = "SIGQUIT"
    stop_timeout                                = 0
    tty                                         = false
    wait                                        = false
    wait_timeout                                = 60

    ports {
        external = 8080
        internal = 80
        ip       = "0.0.0.0"
        protocol = "tcp"
    }
}

# docker_image.nginx:
resource "docker_image" "nginx" {
    id           = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest"
    image_id     = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9"
    keep_locally = false
    latest       = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9"
    name         = "nginx:latest"
    repo_digest  = "nginx@sha256:2bdc49f2f8ae8d8dc50ed00f2ee56d00385c6f8bc8a8b320d0a294d9e3b49026"
}


Outputs:

address = "http://localhost:8080"
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform apply
docker_image.nginx: Refreshing state... [id=sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest]
docker_container.nginx: Refreshing state... [id=028d164a58a4d922f957404be3bc21a2f839507bab536d746d401e74771e8545]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # docker_container.nginx must be replaced
-/+ resource "docker_container" "nginx" {
      + bridge                                      = (known after apply)
      ~ command                                     = [
          - "nginx",
          - "-g",
          - "daemon off;",
        ] -> (known after apply)
      + container_logs                              = (known after apply)
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      ~ entrypoint                                  = [
          - "/docker-entrypoint.sh",
        ] -> (known after apply)
      ~ env                                         = [] -> (known after apply)
      + exit_code                                   = (known after apply)
      ~ gateway                                     = "172.17.0.1" -> (known after apply)
      - group_add                                   = [] -> null
      ~ hostname                                    = "028d164a58a4" -> (known after apply)
      ~ id                                          = "028d164a58a4d922f957404be3bc21a2f839507bab536d746d401e74771e8545" -> (known after apply)
      ~ image                                       = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9" -> "nginx1" # forces replacement
      ~ init                                        = false -> (known after apply)
      ~ ip_address                                  = "172.17.0.2" -> (known after apply)
      ~ ip_prefix_length                            = 16 -> (known after apply)
      ~ ipc_mode                                    = "private" -> (known after apply)
      - links                                       = [] -> null
      ~ log_driver                                  = "json-file" -> (known after apply)
      - log_opts                                    = {} -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
        name                                        = "tutorial"
      ~ network_data                                = [
          - {
              - gateway                   = "172.17.0.1"
              - global_ipv6_address       = ""
              - global_ipv6_prefix_length = 0
              - ip_address                = "172.17.0.2"
              - ip_prefix_length          = 16
              - ipv6_gateway              = ""
              - network_name              = "bridge"
            },
        ] -> (known after apply)
      - network_mode                                = "default" -> null
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      ~ runtime                                     = "runc" -> (known after apply)
      ~ security_opts                               = [] -> (known after apply)
      ~ shm_size                                    = 64 -> (known after apply)
      ~ stop_signal                                 = "SIGQUIT" -> (known after apply)
      ~ stop_timeout                                = 0 -> (known after apply)
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
        # (13 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

  # docker_tag.tag_nginx will be created
  + resource "docker_tag" "tag_nginx" {
      + id              = (known after apply)
      + source_image    = "nginx:latest"
      + source_image_id = (known after apply)
      + target_image    = "nginx1"
    }

Plan: 2 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_container.nginx: Destroying... [id=028d164a58a4d922f957404be3bc21a2f839507bab536d746d401e74771e8545]
docker_container.nginx: Destruction complete after 0s
docker_tag.tag_nginx: Creating...
docker_tag.tag_nginx: Creation complete after 0s [id=nginx:latest.nginx1]
docker_container.nginx: Creating...
docker_container.nginx: Creation complete after 1s [id=bd8221cdb8954644ef28a2270ecdd744c413ab85a3bafa55dae97a75b6894821]

Apply complete! Resources: 2 added, 0 changed, 1 destroyed.

Outputs:

address = "http://localhost:8080"
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform state list
docker_container.nginx
docker_image.nginx
docker_tag.tag_nginx
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform show
# docker_container.nginx:
resource "docker_container" "nginx" {
    attach                                      = false
    command                                     = [
        "nginx",
        "-g",
        "daemon off;",
    ]
    container_read_refresh_timeout_milliseconds = 15000
    cpu_shares                                  = 0
    entrypoint                                  = [
        "/docker-entrypoint.sh",
    ]
    env                                         = []
    gateway                                     = "172.17.0.1"
    hostname                                    = "bd8221cdb895"
    id                                          = "bd8221cdb8954644ef28a2270ecdd744c413ab85a3bafa55dae97a75b6894821"
    image                                       = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9"
    init                                        = false
    ip_address                                  = "172.17.0.2"
    ip_prefix_length                            = 16
    ipc_mode                                    = "private"
    log_driver                                  = "json-file"
    logs                                        = false
    max_retry_count                             = 0
    memory                                      = 0
    memory_swap                                 = 0
    must_run                                    = true
    name                                        = "tutorial"
    network_data                                = [
        {
            gateway                   = "172.17.0.1"
            global_ipv6_address       = ""
            global_ipv6_prefix_length = 0
            ip_address                = "172.17.0.2"
            ip_prefix_length          = 16
            ipv6_gateway              = ""
            network_name              = "bridge"
        },
    ]
    network_mode                                = "default"
    privileged                                  = false
    publish_all_ports                           = false
    read_only                                   = false
    remove_volumes                              = true
    restart                                     = "no"
    rm                                          = false
    runtime                                     = "runc"
    security_opts                               = []
    shm_size                                    = 64
    start                                       = true
    stdin_open                                  = false
    stop_signal                                 = "SIGQUIT"
    stop_timeout                                = 0
    tty                                         = false
    wait                                        = false
    wait_timeout                                = 60

    ports {
        external = 8080
        internal = 80
        ip       = "0.0.0.0"
        protocol = "tcp"
    }
}

# docker_image.nginx:
resource "docker_image" "nginx" {
    id           = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest"
    image_id     = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9"
    keep_locally = false
    latest       = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9"
    name         = "nginx:latest"
    repo_digest  = "nginx@sha256:2bdc49f2f8ae8d8dc50ed00f2ee56d00385c6f8bc8a8b320d0a294d9e3b49026"
}

# docker_tag.tag_nginx:
resource "docker_tag" "tag_nginx" {
    id              = "nginx:latest.nginx1"
    source_image    = "nginx:latest"
    source_image_id = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9"
    target_image    = "nginx1"
}


Outputs:

address = "http://localhost:8080"
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ terraform destroy 
docker_tag.tag_nginx: Refreshing state... [id=nginx:latest.nginx1]
docker_image.nginx: Refreshing state... [id=sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest]
docker_container.nginx: Refreshing state... [id=bd8221cdb8954644ef28a2270ecdd744c413ab85a3bafa55dae97a75b6894821]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # docker_container.nginx will be destroyed
  - resource "docker_container" "nginx" {
      - attach                                      = false -> null
      - command                                     = [
          - "nginx",
          - "-g",
          - "daemon off;",
        ] -> null
      - container_read_refresh_timeout_milliseconds = 15000 -> null
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      - entrypoint                                  = [
          - "/docker-entrypoint.sh",
        ] -> null
      - env                                         = [] -> null
      - gateway                                     = "172.17.0.1" -> null
      - group_add                                   = [] -> null
      - hostname                                    = "bd8221cdb895" -> null
      - id                                          = "bd8221cdb8954644ef28a2270ecdd744c413ab85a3bafa55dae97a75b6894821" -> null
      - image                                       = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9" -> null
      - init                                        = false -> null
      - ip_address                                  = "172.17.0.2" -> null
      - ip_prefix_length                            = 16 -> null
      - ipc_mode                                    = "private" -> null
      - links                                       = [] -> null
      - log_driver                                  = "json-file" -> null
      - log_opts                                    = {} -> null
      - logs                                        = false -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
      - must_run                                    = true -> null
      - name                                        = "tutorial" -> null
      - network_data                                = [
          - {
              - gateway                   = "172.17.0.1"
              - global_ipv6_address       = ""
              - global_ipv6_prefix_length = 0
              - ip_address                = "172.17.0.2"
              - ip_prefix_length          = 16
              - ipv6_gateway              = ""
              - network_name              = "bridge"
            },
        ] -> null
      - network_mode                                = "default" -> null
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      - read_only                                   = false -> null
      - remove_volumes                              = true -> null
      - restart                                     = "no" -> null
      - rm                                          = false -> null
      - runtime                                     = "runc" -> null
      - security_opts                               = [] -> null
      - shm_size                                    = 64 -> null
      - start                                       = true -> null
      - stdin_open                                  = false -> null
      - stop_signal                                 = "SIGQUIT" -> null
      - stop_timeout                                = 0 -> null
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
      - tty                                         = false -> null
      - wait                                        = false -> null
      - wait_timeout                                = 60 -> null

      - ports {
          - external = 8080 -> null
          - internal = 80 -> null
          - ip       = "0.0.0.0" -> null
          - protocol = "tcp" -> null
        }
    }

  # docker_image.nginx will be destroyed
  - resource "docker_image" "nginx" {
      - id           = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest" -> null
      - image_id     = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9" -> null
      - keep_locally = false -> null
      - latest       = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9" -> null
      - name         = "nginx:latest" -> null
      - repo_digest  = "nginx@sha256:2bdc49f2f8ae8d8dc50ed00f2ee56d00385c6f8bc8a8b320d0a294d9e3b49026" -> null
    }

  # docker_tag.tag_nginx will be destroyed
  - resource "docker_tag" "tag_nginx" {
      - id              = "nginx:latest.nginx1" -> null
      - source_image    = "nginx:latest" -> null
      - source_image_id = "sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9" -> null
      - target_image    = "nginx1" -> null
    }

Plan: 0 to add, 0 to change, 3 to destroy.

Changes to Outputs:
  - address = "http://localhost:8080" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

docker_image.nginx: Destroying... [id=sha256:d453dd892d9357f3559b967478ae9cbc417b52de66b53142f6c16c8a275486b9nginx:latest]
docker_container.nginx: Destroying... [id=bd8221cdb8954644ef28a2270ecdd744c413ab85a3bafa55dae97a75b6894821]
docker_image.nginx: Destruction complete after 0s
docker_container.nginx: Destruction complete after 1s
docker_tag.tag_nginx: Destroying... [id=nginx:latest.nginx1]
docker_tag.tag_nginx: Destruction complete after 0s

Destroy complete! Resources: 3 destroyed.
ciecia@alpha:~/Desktop/wsb/iac-labs-infra/terraform/zad2$ 